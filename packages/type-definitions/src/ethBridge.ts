export default {
  rpc: {
    getRequests: {
      description: 'Get registered requests and their statuses.',
      params: [
        {
          name: 'requestHashes',
          type: 'Vec<H256>',
        },
        {
          name: 'networkId',
          type: 'BridgeNetworkId',
          isOptional: true,
        },
        {
          name: 'redirectFinishedLoadRequests',
          type: 'bool', // default: true
          isOptional: true,
        },
        {
          name: 'at',
          type: 'BlockHash',
          isOptional: true,
        },
      ],
      type: 'Result<Vec<(OffchainRequest, RequestStatus)>, DispatchError>',
    },
    getApprovedRequests: {
      description: 'Get approved encoded requests and their approvals.',
      params: [
        {
          name: 'requestHashes',
          type: 'Vec<H256>',
        },
        {
          name: 'networkId',
          type: 'BridgeNetworkId',
          isOptional: true,
        },
        {
          name: 'at',
          type: 'BlockHash',
          isOptional: true,
        },
      ],
      type: 'Result<Vec<(OutgoingRequestEncoded, Vec<SignatureParams>)>, DispatchError>',
    },
    getApprovals: {
      description: 'Get approvals of the given requests.',
      params: [
        {
          name: 'requestHashes',
          type: 'Vec<H256>',
        },
        {
          name: 'networkId',
          type: 'BridgeNetworkId',
          isOptional: true,
        },
        {
          name: 'at',
          type: 'BlockHash',
          isOptional: true,
        },
      ],
      type: 'Result<Vec<Vec<SignatureParams>>, DispatchError>',
    },
    getAccountRequests: {
      description: 'Get account requests hashes.',
      params: [
        {
          name: 'accountId',
          type: 'AccountId',
        },
        {
          name: 'statusFilter',
          type: 'RequestStatus',
          isOptional: true,
        },
        {
          name: 'at',
          type: 'BlockHash',
          isOptional: true,
        },
      ],
      type: 'Result<Vec<(BridgeNetworkId, H256)>, DispatchError>',
    },
    getRegisteredAssets: {
      description: 'Get registered assets and tokens.',
      params: [
        {
          name: 'networkId',
          type: 'BridgeNetworkId',
          isOptional: true,
        },
        {
          name: 'at',
          type: 'BlockHash',
          isOptional: true,
        },
      ],
      type: 'Result<Vec<(AssetKind, (AssetId, BalancePrecision), Option<(H160, BalancePrecision)>)>, DispatchError>',
    },
  },
  types: {
    MultiChainHeight: {
      _enum: {
        Thischain: 'BlockNumber',
        Sidechain: 'u64',
      },
    },
    BridgeTimepoint: {
      height: 'MultiChainHeight',
      index: 'u32',
    },
    EthPeersSync: {
      isBridgeReady: 'bool',
      isXorReady: 'bool',
      isValReady: 'bool',
    },
    BridgeStatus: {
      _enum: ['Initialized', 'Migrating'],
    },
    BridgeNetworkId: 'u32',
    AssetKind: {
      _enum: ['Thischain', 'Sidechain', 'SidechainOwned'],
    },
    RequestStatus: {
      _enum: ['Pending', 'Frozen', 'ApprovalsReady', 'Failed', 'Done'],
    },
    SignatureParams: {
      r: '[u8; 32]',
      s: '[u8; 32]',
      v: 'u8',
    },
    IncomingTransactionRequestKind: {
      _enum: [
        'Transfer',
        'AddAsset',
        'AddPeer',
        'RemovePeer',
        'PrepareForMigration',
        'Migrate',
        'AddPeerCompat',
        'RemovePeerCompat',
        'TransferXOR',
      ],
    },
    IncomingMetaRequestKind: {
      _enum: ['CancelOutgoingRequest', 'MarkAsDone'],
    },
    IncomingRequestKind: {
      _enum: {
        Transaction: 'IncomingTransactionRequestKind',
        Meta: 'IncomingMetaRequestKind',
      },
    },
    ChangePeersContract: {
      _enum: ['XOR', 'VAL'],
    },
    CurrencyIdEncoded: {
      _enum: {
        AssetId: 'H256',
        TokenAddress: 'H160',
      },
    },
    FixedBytes: 'Vec<u8>',
    OutgoingTransfer: {
      from: 'AccountId',
      to: 'EthAddress',
      assetId: 'AssetId',
      amount: 'Balance',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingTransferEncoded: {
      currencyId: 'CurrencyIdEncoded',
      amount: 'U256',
      to: 'EthAddress',
      from: 'EthAddress',
      txHash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingAddAsset: {
      author: 'AccountId',
      assetId: 'AssetId',
      supply: 'Balance',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingAddAssetEncoded: {
      name: 'String',
      symbol: 'String',
      decimal: 'u8',
      supply: 'U256',
      sidechainAssetId: 'FixedBytes',
      hash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingAddToken: {
      author: 'AccountId',
      tokenAddress: 'EthAddress',
      ticker: 'String',
      name: 'String',
      decimals: 'u8',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingAddTokenEncoded: {
      tokenAddress: 'EthAddress',
      ticker: 'String',
      name: 'String',
      decimals: 'u8',
      hash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingAddPeer: {
      author: 'AccountId',
      peerAddress: 'EthAddress',
      peerAccountId: 'AccountId',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingAddPeerCompat: {
      author: 'AccountId',
      peerAddress: 'EthAddress',
      peerAccountId: 'AccountId',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingAddPeerEncoded: {
      peerAddress: 'EthAddress',
      txHash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingRemovePeer: {
      author: 'AccountId',
      peerAccountId: 'AccountId',
      peerAddress: 'EthAddress',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingRemovePeerCompat: {
      author: 'AccountId',
      peerAccountId: 'AccountId',
      peerAddress: 'EthAddress',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingRemovePeerEncoded: {
      peerAddress: 'EthAddress',
      txHash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingPrepareForMigration: {
      author: 'AccountId',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingPrepareForMigrationEncoded: {
      thisContractAddress: 'EthAddress',
      txHash: 'H256',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingMigrate: {
      author: 'AccountId',
      newContractAddress: 'EthAddress',
      erc20NativeTokens: 'Vec<EthAddress>',
      nonce: 'Index',
      networkId: 'BridgeNetworkId',
      timepoint: 'BridgeTimepoint',
    },
    OutgoingMigrateEncoded: {
      thisContractAddress: 'EthAddress',
      txHash: 'H256',
      newContractAddress: 'EthAddress',
      erc20NativeTokens: 'Vec<EthAddress>',
      networkId: 'H256',
      raw: 'Vec<u8>',
    },
    OutgoingRequest: {
      _enum: {
        Transfer: 'OutgoingTransfer',
        AddAsset: 'OutgoingAddAsset',
        AddToken: 'OutgoingAddToken',
        AddPeer: 'OutgoingAddPeer',
        RemovePeer: 'OutgoingRemovePeer',
        PrepareForMigration: 'OutgoingPrepareForMigration',
        Migrate: 'OutgoingMigrate',
      },
    },
    OutgoingRequestEncoded: {
      _enum: {
        Transfer: 'OutgoingTransferEncoded',
        AddAsset: 'OutgoingAddAssetEncoded',
        AddToken: 'OutgoingAddTokenEncoded',
        AddPeer: 'OutgoingAddPeerEncoded',
        RemovePeer: 'OutgoingRemovePeerEncoded',
        PrepareForMigration: 'OutgoingPrepareForMigrationEncoded',
        Migrate: 'OutgoingMigrateEncoded',
      },
    },
    IncomingTransfer: {
      from: 'EthAddress',
      to: 'AccountId',
      assetId: 'AssetId',
      assetKind: 'AssetKind',
      amount: 'Balance',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingAddToken: {
      tokenAddress: 'EthAddress',
      assetId: 'AssetId',
      precision: 'BalancePrecision',
      symbol: 'AssetSymbol',
      name: 'AssetName',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingChangePeers: {
      peerAccountId: 'AccountId',
      peerAddress: 'EthAddress',
      added: 'bool',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingChangePeersCompat: {
      peerAccountId: 'AccountId',
      peerAddress: 'EthAddress',
      added: 'bool',
      contract: 'ChangePeersContract',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingCancelOutgoingRequest: {
      outgoingRequest: 'OutgoingRequest',
      outgoingRequestHash: 'H256',
      initialRequestHash: 'H256',
      txInput: 'Vec<u8>',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingMarkAsDoneRequest: {
      outgoingRequestHash: 'H256',
      initialRequestHash: 'H256',
      author: 'AccountId',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingPrepareForMigration: {
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingMigrate: {
      newContractAddress: 'EthAddress',
      author: 'AccountId',
      txHash: 'H256',
      atHeight: 'u64',
      timepoint: 'BridgeTimepoint',
      networkId: 'BridgeNetworkId',
    },
    IncomingRequest: {
      _enum: {
        Transfer: 'IncomingTransfer',
        AddToken: 'IncomingAddToken',
        ChangePeers: 'IncomingChangePeers',
        CancelOutgoingRequest: 'IncomingCancelOutgoingRequest',
        MarkAsDone: 'IncomingMarkAsDoneRequest',
        PrepareForMigration: 'IncomingPrepareForMigration',
        Migrate: 'IncomingMigrate',
      },
    },
    LoadIncomingTransactionRequest: {
      author: 'AccountId',
      hash: 'H256',
      timepoint: 'BridgeTimepoint',
      kind: 'IncomingTransactionRequestKind',
      networkId: 'BridgeNetworkId',
    },
    LoadIncomingMetaRequest: {
      author: 'AccountId',
      hash: 'H256',
      timepoint: 'BridgeTimepoint',
      kind: 'IncomingMetaRequestKind',
      networkId: 'BridgeNetworkId',
    },
    LoadIncomingRequest: {
      _enum: {
        Transaction: 'LoadIncomingTransactionRequest',
        Meta: '(LoadIncomingMetaRequest, H256)',
      },
    },
    OffchainRequest: {
      _enum: {
        Outgoing: '(OutgoingRequest, H256)',
        LoadIncoming: 'LoadIncomingRequest',
        Incoming: '(IncomingRequest, H256)',
      },
    },
    EthBridgeStorageVersion: {
      _enum: ['V1', 'V2RemovePendingTransfers'],
    },
    EthAddress: 'H160',
    BridgeSignatureVersion: {
      _enum: ['V1', 'V2'],
    },
  },
  typesAlias: {
    ethBridge: {
      StorageVersion: 'EthBridgeStorageVersion',
    },
  },
};
